// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/nekoblog.proto

package neko_blog_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Id struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_8377f292845dafb1, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Article struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_8377f292845dafb1, []int{1}
}

func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "neko_blog_grpc.id")
	proto.RegisterType((*Article)(nil), "neko_blog_grpc.Article")
}

func init() { proto.RegisterFile("proto/nekoblog.proto", fileDescriptor_8377f292845dafb1) }

var fileDescriptor_8377f292845dafb1 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4b, 0xcd, 0xce, 0x4f, 0xca, 0xc9, 0x4f, 0xd7, 0x03, 0x73, 0x85, 0xf8, 0x40,
	0xfc, 0x78, 0x90, 0x40, 0x7c, 0x7a, 0x51, 0x41, 0xb2, 0x92, 0x08, 0x17, 0x53, 0x66, 0x8a, 0x10,
	0x1f, 0x88, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0xca, 0x4c, 0x51, 0xd2, 0xe5, 0x62,
	0x77, 0x2c, 0x2a, 0xc9, 0x4c, 0xce, 0x49, 0x45, 0x97, 0x12, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad,
	0x28, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0xfc, 0xb8, 0xf8, 0xfd, 0x52,
	0xb3, 0xf3, 0x9d, 0x72, 0xf2, 0xd3, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xac, 0xb9,
	0xb8, 0xdc, 0x53, 0x4b, 0x60, 0x86, 0x08, 0xe9, 0xa1, 0x5a, 0xab, 0x97, 0x99, 0x22, 0x25, 0x8e,
	0x2e, 0x06, 0x55, 0xac, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xab, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x13, 0xcb, 0x91, 0x96, 0xc3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NekoBlogServiceClient is the client API for NekoBlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NekoBlogServiceClient interface {
	GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Article, error)
}

type nekoBlogServiceClient struct {
	cc *grpc.ClientConn
}

func NewNekoBlogServiceClient(cc *grpc.ClientConn) NekoBlogServiceClient {
	return &nekoBlogServiceClient{cc}
}

func (c *nekoBlogServiceClient) GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/neko_blog_grpc.NekoBlogService/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NekoBlogServiceServer is the server API for NekoBlogService service.
type NekoBlogServiceServer interface {
	GetArticle(context.Context, *Id) (*Article, error)
}

// UnimplementedNekoBlogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNekoBlogServiceServer struct {
}

func (*UnimplementedNekoBlogServiceServer) GetArticle(ctx context.Context, req *Id) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}

func RegisterNekoBlogServiceServer(s *grpc.Server, srv NekoBlogServiceServer) {
	s.RegisterService(&_NekoBlogService_serviceDesc, srv)
}

func _NekoBlogService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NekoBlogServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neko_blog_grpc.NekoBlogService/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NekoBlogServiceServer).GetArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NekoBlogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neko_blog_grpc.NekoBlogService",
	HandlerType: (*NekoBlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _NekoBlogService_GetArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nekoblog.proto",
}
